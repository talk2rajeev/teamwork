import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../appStore/store';
import * as fetcher from '../../services/fetcher/fetcher';
import * as Types from '../../utils/types/types';

const initialState: Types.UserStoriesState = {
  detailedUserStory: {
    status: 'idle',
    userStories: [],
  },
  selectedUserStory: {
    status: 'idle',
  },
};

type GetDetailedUserStoriesBySprintIdReqpayload = {
  productId: string;
  sprintId: string;
};
export const getDetailedUserStoriesBySprintIdAsync = createAsyncThunk<
  Types.GenericResponseType<Types.UserStory[]>,
  GetDetailedUserStoriesBySprintIdReqpayload
>(
  'userStory/getDetailedUserStoriesBySprintId',
  async (reqPayload, thunkAPI) => {
    const response = await fetcher.get<
      Types.GenericResponseType<Types.UserStory[]>
    >(
      `/userStory/getDetailedUserStoriesBySprintId/${reqPayload.productId}/${reqPayload.sprintId}`
    );
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

type GetDetailedUserStoriesByUserStoryIdReqpayload = {
  productId: string;
  sprintId: string;
  userStoryId: string;
};
export const getDetailedUserStoriesByUserStoryIdAsync = createAsyncThunk<
  Types.GenericResponseType<Types.UserStory[]>,
  GetDetailedUserStoriesByUserStoryIdReqpayload
>(
  '/getDetailedUserStoriesByUserStoryId/:productId/:sprintId/:userStoryId',
  async (reqPayload, thunkAPI) => {
    const response = await fetcher.get<
      Types.GenericResponseType<Types.UserStory[]>
    >(
      `/userStory/getDetailedUserStoriesByUserStoryId/${reqPayload.productId}/${reqPayload.sprintId}/${reqPayload.userStoryId}`
    );
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const userStorySlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetDetailedUserStory: (state) => {
      state.detailedUserStory.userStories = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDetailedUserStoriesBySprintIdAsync.pending, (state) => {
        state.detailedUserStory.status = 'loading';
      })
      .addCase(
        getDetailedUserStoriesBySprintIdAsync.fulfilled,
        (state, action) => {
          state.detailedUserStory.status = 'idle';
          state.detailedUserStory.userStories = action.payload.data;
        }
      )
      .addCase(getDetailedUserStoriesBySprintIdAsync.rejected, (state) => {
        state.detailedUserStory.status = 'failed';
        state.detailedUserStory.userStories = [];
      })

      .addCase(getDetailedUserStoriesByUserStoryIdAsync.pending, (state) => {
        state.selectedUserStory.status = 'loading';
      })
      .addCase(
        getDetailedUserStoriesByUserStoryIdAsync.fulfilled,
        (state, action) => {
          state.selectedUserStory.status = 'idle';
          state.selectedUserStory.userStory = action.payload.data[0];
        }
      )
      .addCase(getDetailedUserStoriesByUserStoryIdAsync.rejected, (state) => {
        state.selectedUserStory.status = 'failed';
        state.selectedUserStory.userStory = undefined;
      });
  },
});

export const { resetDetailedUserStory } = userStorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const allUsers = (state: RootState) => state.user.allUsers;
export const userStoryState = (state: RootState) => state.userStory;

export default userStorySlice.reducer;
