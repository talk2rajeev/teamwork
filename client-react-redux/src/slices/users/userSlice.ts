import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../appStore/store';
import * as fetcher from '../../services/fetcher/fetcher';
import * as Types from '../../utils/types/types';

type UserType = {
  roleName: string;
  roleId: number;
  profileId: number;
  fname: string;
  lname: string;
};

export interface UserState {
  allUsers: {
    status: Types.StatusType;
    users: Array<UserType>;
  };
}

const initialState: UserState = {
  allUsers: {
    status: 'idle',
    users: [],
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(loginAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllUsersAsync = createAsyncThunk(
  'user/getAllUsers',
  async () => {
    const response = await fetcher.get<Array<UserType>>('/user/getAllUsers');
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllUsersAsync.pending, (state) => {
        state.allUsers = {
          status: 'loading',
          users: [],
        };
      })
      .addCase(getAllUsersAsync.fulfilled, (state, action) => {
        state.allUsers = {
          status: 'idle',
          users: action.payload,
        };
      })
      .addCase(getAllUsersAsync.rejected, (state) => {
        state.allUsers = {
          status: 'failed',
          users: [],
        };
      });
  },
});

// export const { logout, setSelectedProductId, clearSelectedProduct } = teamSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const allUsers = (state: RootState) => state.user.allUsers;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const logoutAsync =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;
