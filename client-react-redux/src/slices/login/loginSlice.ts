import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../appStore/store';
import { login, logoutAsyncApi } from '../../utils/api/login/loginAPI';
import { AuthUtil } from '../../utils/auth/auth';
import { setSessionStorage } from '../../utils/storage/storage';

export interface loginState {
  tokens: {
    accessToken: string;
    refreshToken: string;
    expiresIn: number;
    expireTime: number;
  } | null;
  status: 'idle' | 'loading' | 'failed';
  isLogin: boolean;
  message?: string;
}

const initialState: loginState = {
  tokens: null,
  status: 'idle',
  isLogin: false,
  message: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(loginAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  'auth/login',
  async (reqPayload: { username: string; password: string }) => {
    const response = await AuthUtil.login(reqPayload);
    // The value we return becomes the `fulfilled` action payload
    if (response.status === 401) {
      throw new Error('Login Failed. Check your login credentials.');
    }
    const respData = response.json();

    console.log('respData ', response, respData);
    return respData;
  }
);

export const logoutAsync = createAsyncThunk('auth/logout', async () => {
  await logoutAsyncApi();
  // The value we return becomes the `fulfilled` action payload
  return;
});

export const loginSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.tokens = null;
      sessionStorage.removeItem('login');
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tokens = action.payload;
        state.isLogin = true;
        state.message = undefined;
        if (
          action.payload.accessToken &&
          action.payload.refreshToken &&
          action.payload.expiresIn
        ) {
          setSessionStorage('login', JSON.stringify(state));
        }
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.status = 'failed';
        state.message = action.error.message;
        state.isLogin = false;
      })

      .addCase(logoutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logoutAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.tokens = null;
      })
      .addCase(logoutAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { logout } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const loginDetails = (state: RootState) => state.login;

export default loginSlice.reducer;
